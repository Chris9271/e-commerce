{"ast":null,"code":"import { Products, Location, Cart } from '../../data';\nimport { isRecordExpression } from '@babel/types';\nconst initState = {\n  Products,\n  Location,\n  Cart\n};\n\nconst rootReducer = (state = initState, action) => {\n  switch (action.type) {\n    case \"ADD_TO_CART\":\n      return { ...state,\n        Cart: [...state.Cart, action.payload]\n      };\n\n    case \"REMOVE_FROM_CART\":\n      const filteredItem = state.Cart.filter(item => item.id !== action.payload);\n      return { ...state,\n        Cart: filteredItem\n      };\n\n    case \"INCREASE_QUANTITY\":\n      const increaseItem = state.Cart.map(item => {\n        if (item.id === action.payload) {\n          item.quantity += 1;\n\n          if (item.quantity === 1) {\n            item.totalPrice = Number(item.price);\n          } else {\n            item.totalPrice += Number(item.price);\n          }\n\n          console.log(item.quantity);\n          console.log(item.price);\n          console.log(item.totalPrice); // if(item.quantity === 1){\n          //     item.totalPrice = item.price\n          // }else{\n          //     item.totalPrice += item.price * item.quantity.toFixed(2)\n          // }\n        }\n\n        return item;\n      });\n      return { ...state,\n        Cart: increaseItem\n      };\n\n    case \"DECREASE_QUANTITY\":\n      const decreaseItem = state.Cart.map(item => {\n        if (item.id === action.payload) {\n          item.quantity -= 1;\n\n          if (item.quantity > 1) {\n            item.totalPrice -= Number(item.price);\n          }\n\n          console.log(item.quantity);\n          console.log(item.price);\n          console.log(item.totalPrice);\n        }\n\n        return item;\n      });\n      return { ...state,\n        Cart: decreaseItem\n      };\n\n    case \"TOTAL_PRICE\":\n      return {};\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/chris/Desktop/WMAD/Major/ecommerce/src/components/reducer/rootReducer.js"],"names":["Products","Location","Cart","isRecordExpression","initState","rootReducer","state","action","type","payload","filteredItem","filter","item","id","increaseItem","map","quantity","totalPrice","Number","price","console","log","decreaseItem"],"mappings":"AAAA,SAAQA,QAAR,EAAkBC,QAAlB,EAA4BC,IAA5B,QAAuC,YAAvC;AACA,SAASC,kBAAT,QAAmC,cAAnC;AAEA,MAAMC,SAAS,GAAG;AACdJ,EAAAA,QADc;AAEdC,EAAAA,QAFc;AAGdC,EAAAA;AAHc,CAAlB;;AAMA,MAAMG,WAAW,GAAG,CAACC,KAAK,GAAGF,SAAT,EAAoBG,MAApB,KAA+B;AAC/C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,aAAL;AACI,aAAM,EACF,GAAGF,KADD;AAEFJ,QAAAA,IAAI,EAAE,CAAC,GAAGI,KAAK,CAACJ,IAAV,EAAgBK,MAAM,CAACE,OAAvB;AAFJ,OAAN;;AAKJ,SAAK,kBAAL;AACI,YAAMC,YAAY,GAAGJ,KAAK,CAACJ,IAAN,CAAWS,MAAX,CAAkBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYN,MAAM,CAACE,OAA7C,CAArB;AACA,aAAM,EACF,GAAGH,KADD;AAEFJ,QAAAA,IAAI,EAAEQ;AAFJ,OAAN;;AAKJ,SAAK,mBAAL;AACI,YAAMI,YAAY,GAAGR,KAAK,CAACJ,IAAN,CAAWa,GAAX,CAAgBH,IAAD,IAAU;AAC1C,YAAGA,IAAI,CAACC,EAAL,KAAYN,MAAM,CAACE,OAAtB,EAA8B;AAC1BG,UAAAA,IAAI,CAACI,QAAL,IAAiB,CAAjB;;AACI,cAAGJ,IAAI,CAACI,QAAL,KAAkB,CAArB,EAAuB;AACnBJ,YAAAA,IAAI,CAACK,UAAL,GAAkBC,MAAM,CAACN,IAAI,CAACO,KAAN,CAAxB;AACH,WAFD,MAEK;AACDP,YAAAA,IAAI,CAACK,UAAL,IAAmBC,MAAM,CAACN,IAAI,CAACO,KAAN,CAAzB;AACH;;AACLC,UAAAA,OAAO,CAACC,GAAR,CAAYT,IAAI,CAACI,QAAjB;AACAI,UAAAA,OAAO,CAACC,GAAR,CAAYT,IAAI,CAACO,KAAjB;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYT,IAAI,CAACK,UAAjB,EAT0B,CAU1B;AACA;AACA;AACA;AACA;AACH;;AACD,eAAOL,IAAP;AACH,OAlBoB,CAArB;AAmBA,aAAM,EACF,GAAGN,KADD;AAEFJ,QAAAA,IAAI,EAAEY;AAFJ,OAAN;;AAKJ,SAAK,mBAAL;AACQ,YAAMQ,YAAY,GAAGhB,KAAK,CAACJ,IAAN,CAAWa,GAAX,CAAgBH,IAAD,IAAU;AAC1C,YAAGA,IAAI,CAACC,EAAL,KAAYN,MAAM,CAACE,OAAtB,EAA8B;AAC1BG,UAAAA,IAAI,CAACI,QAAL,IAAiB,CAAjB;;AACA,cAAGJ,IAAI,CAACI,QAAL,GAAgB,CAAnB,EAAqB;AACjBJ,YAAAA,IAAI,CAACK,UAAL,IAAmBC,MAAM,CAACN,IAAI,CAACO,KAAN,CAAzB;AACH;;AACDC,UAAAA,OAAO,CAACC,GAAR,CAAYT,IAAI,CAACI,QAAjB;AACJI,UAAAA,OAAO,CAACC,GAAR,CAAYT,IAAI,CAACO,KAAjB;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYT,IAAI,CAACK,UAAjB;AACC;;AACD,eAAOL,IAAP;AACH,OAXoB,CAArB;AAYA,aAAM,EACF,GAAGN,KADD;AAEFJ,QAAAA,IAAI,EAAEoB;AAFJ,OAAN;;AAKR,SAAK,aAAL;AACI,aAAM,EAAN;;AAIJ;AACI,aAAOhB,KAAP;AA/DR;AAkEH,CAnED;;AAqEA,eAAeD,WAAf","sourcesContent":["import {Products, Location, Cart} from '../../data';\nimport { isRecordExpression } from '@babel/types';\n\nconst initState = {\n    Products,\n    Location,\n    Cart\n}\n\nconst rootReducer = (state = initState, action) => {\n    switch(action.type){\n        case \"ADD_TO_CART\":\n            return{\n                ...state,\n                Cart: [...state.Cart, action.payload]\n            };\n\n        case \"REMOVE_FROM_CART\":\n            const filteredItem = state.Cart.filter(item => item.id !== action.payload)\n            return{\n                ...state,\n                Cart: filteredItem\n            };\n\n        case \"INCREASE_QUANTITY\":\n            const increaseItem = state.Cart.map((item) => {\n                if(item.id === action.payload){\n                    item.quantity += 1;\n                        if(item.quantity === 1){\n                            item.totalPrice = Number(item.price)\n                        }else{\n                            item.totalPrice += Number(item.price)\n                        }\n                    console.log(item.quantity);\n                    console.log(item.price)\n                    console.log(item.totalPrice)\n                    // if(item.quantity === 1){\n                    //     item.totalPrice = item.price\n                    // }else{\n                    //     item.totalPrice += item.price * item.quantity.toFixed(2)\n                    // }\n                }\n                return item;\n            })\n            return{\n                ...state,\n                Cart: increaseItem\n            };\n\n        case \"DECREASE_QUANTITY\":\n                const decreaseItem = state.Cart.map((item) => {\n                    if(item.id === action.payload){\n                        item.quantity -= 1; \n                        if(item.quantity > 1){\n                            item.totalPrice -= Number(item.price)\n                        }\n                        console.log(item.quantity);\n                    console.log(item.price)\n                    console.log(item.totalPrice)\n                    }\n                    return item;\n                })\n                return{\n                    ...state,\n                    Cart: decreaseItem\n                };\n        \n        case \"TOTAL_PRICE\":\n            return{\n\n            }\n\n        default:\n            return state;\n    }\n\n}\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}